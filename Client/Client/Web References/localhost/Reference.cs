//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Client.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IService1", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataUsingDataContractOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetaOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetdOperationCompleted;
        
        private System.Threading.SendOrPostCallback registeraOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerpOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerdOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginaOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginpOperationCompleted;
        
        private System.Threading.SendOrPostCallback logindOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::Client.Properties.Settings.Default.Client_localhost_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event GetDataUsingDataContractCompletedEventHandler GetDataUsingDataContractCompleted;
        
        /// <remarks/>
        public event resetCompletedEventHandler resetCompleted;
        
        /// <remarks/>
        public event resetaCompletedEventHandler resetaCompleted;
        
        /// <remarks/>
        public event resetdCompletedEventHandler resetdCompleted;
        
        /// <remarks/>
        public event registeraCompletedEventHandler registeraCompleted;
        
        /// <remarks/>
        public event registerpCompletedEventHandler registerpCompleted;
        
        /// <remarks/>
        public event registerdCompletedEventHandler registerdCompleted;
        
        /// <remarks/>
        public event loginaCompletedEventHandler loginaCompleted;
        
        /// <remarks/>
        public event loginpCompletedEventHandler loginpCompleted;
        
        /// <remarks/>
        public event logindCompletedEventHandler logindCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GetData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetData(int value, [System.Xml.Serialization.XmlIgnoreAttribute()] bool valueSpecified) {
            object[] results = this.Invoke("GetData", new object[] {
                        value,
                        valueSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(int value, bool valueSpecified) {
            this.GetDataAsync(value, valueSpecified, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(int value, bool valueSpecified, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        value,
                        valueSpecified}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GetDataUsingDataContract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CompositeType GetDataUsingDataContract([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CompositeType composite) {
            object[] results = this.Invoke("GetDataUsingDataContract", new object[] {
                        composite});
            return ((CompositeType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataUsingDataContractAsync(CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        /// <remarks/>
        public void GetDataUsingDataContractAsync(CompositeType composite, object userState) {
            if ((this.GetDataUsingDataContractOperationCompleted == null)) {
                this.GetDataUsingDataContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractOperationCompleted);
            }
            this.InvokeAsync("GetDataUsingDataContract", new object[] {
                        composite}, this.GetDataUsingDataContractOperationCompleted, userState);
        }
        
        private void OnGetDataUsingDataContractOperationCompleted(object arg) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/reset", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void reset([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string patientname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string patientCNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string patientpassword, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string confirmpassword, out bool resetResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool resetResultSpecified) {
            object[] results = this.Invoke("reset", new object[] {
                        patientname,
                        patientCNIC,
                        patientpassword,
                        confirmpassword});
            resetResult = ((bool)(results[0]));
            resetResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void resetAsync(string patientname, string patientCNIC, string patientpassword, string confirmpassword) {
            this.resetAsync(patientname, patientCNIC, patientpassword, confirmpassword, null);
        }
        
        /// <remarks/>
        public void resetAsync(string patientname, string patientCNIC, string patientpassword, string confirmpassword, object userState) {
            if ((this.resetOperationCompleted == null)) {
                this.resetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetOperationCompleted);
            }
            this.InvokeAsync("reset", new object[] {
                        patientname,
                        patientCNIC,
                        patientpassword,
                        confirmpassword}, this.resetOperationCompleted, userState);
        }
        
        private void OnresetOperationCompleted(object arg) {
            if ((this.resetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetCompleted(this, new resetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/reseta", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void reseta([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adminname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adminCNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adminpassword, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string confirmpassword, out bool resetaResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool resetaResultSpecified) {
            object[] results = this.Invoke("reseta", new object[] {
                        adminname,
                        adminCNIC,
                        adminpassword,
                        confirmpassword});
            resetaResult = ((bool)(results[0]));
            resetaResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void resetaAsync(string adminname, string adminCNIC, string adminpassword, string confirmpassword) {
            this.resetaAsync(adminname, adminCNIC, adminpassword, confirmpassword, null);
        }
        
        /// <remarks/>
        public void resetaAsync(string adminname, string adminCNIC, string adminpassword, string confirmpassword, object userState) {
            if ((this.resetaOperationCompleted == null)) {
                this.resetaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetaOperationCompleted);
            }
            this.InvokeAsync("reseta", new object[] {
                        adminname,
                        adminCNIC,
                        adminpassword,
                        confirmpassword}, this.resetaOperationCompleted, userState);
        }
        
        private void OnresetaOperationCompleted(object arg) {
            if ((this.resetaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetaCompleted(this, new resetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/resetd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void resetd([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string doctorname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string doctorCNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string doctorpassword, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string confirmpassword, out bool resetdResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool resetdResultSpecified) {
            object[] results = this.Invoke("resetd", new object[] {
                        doctorname,
                        doctorCNIC,
                        doctorpassword,
                        confirmpassword});
            resetdResult = ((bool)(results[0]));
            resetdResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void resetdAsync(string doctorname, string doctorCNIC, string doctorpassword, string confirmpassword) {
            this.resetdAsync(doctorname, doctorCNIC, doctorpassword, confirmpassword, null);
        }
        
        /// <remarks/>
        public void resetdAsync(string doctorname, string doctorCNIC, string doctorpassword, string confirmpassword, object userState) {
            if ((this.resetdOperationCompleted == null)) {
                this.resetdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetdOperationCompleted);
            }
            this.InvokeAsync("resetd", new object[] {
                        doctorname,
                        doctorCNIC,
                        doctorpassword,
                        confirmpassword}, this.resetdOperationCompleted, userState);
        }
        
        private void OnresetdOperationCompleted(object arg) {
            if ((this.resetdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetdCompleted(this, new resetdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/registera", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void registera([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adminname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adminCNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adminpassword) {
            this.Invoke("registera", new object[] {
                        adminname,
                        adminCNIC,
                        adminpassword});
        }
        
        /// <remarks/>
        public void registeraAsync(string adminname, string adminCNIC, string adminpassword) {
            this.registeraAsync(adminname, adminCNIC, adminpassword, null);
        }
        
        /// <remarks/>
        public void registeraAsync(string adminname, string adminCNIC, string adminpassword, object userState) {
            if ((this.registeraOperationCompleted == null)) {
                this.registeraOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisteraOperationCompleted);
            }
            this.InvokeAsync("registera", new object[] {
                        adminname,
                        adminCNIC,
                        adminpassword}, this.registeraOperationCompleted, userState);
        }
        
        private void OnregisteraOperationCompleted(object arg) {
            if ((this.registeraCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registeraCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/registerp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void registerp([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string patientname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string patientCNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string patientpassword) {
            this.Invoke("registerp", new object[] {
                        patientname,
                        patientCNIC,
                        patientpassword});
        }
        
        /// <remarks/>
        public void registerpAsync(string patientname, string patientCNIC, string patientpassword) {
            this.registerpAsync(patientname, patientCNIC, patientpassword, null);
        }
        
        /// <remarks/>
        public void registerpAsync(string patientname, string patientCNIC, string patientpassword, object userState) {
            if ((this.registerpOperationCompleted == null)) {
                this.registerpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterpOperationCompleted);
            }
            this.InvokeAsync("registerp", new object[] {
                        patientname,
                        patientCNIC,
                        patientpassword}, this.registerpOperationCompleted, userState);
        }
        
        private void OnregisterpOperationCompleted(object arg) {
            if ((this.registerpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerpCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/registerd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void registerd([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string doctorname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string doctorCNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string doctorpassword, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hospitalname) {
            this.Invoke("registerd", new object[] {
                        doctorname,
                        doctorCNIC,
                        doctorpassword,
                        hospitalname});
        }
        
        /// <remarks/>
        public void registerdAsync(string doctorname, string doctorCNIC, string doctorpassword, string hospitalname) {
            this.registerdAsync(doctorname, doctorCNIC, doctorpassword, hospitalname, null);
        }
        
        /// <remarks/>
        public void registerdAsync(string doctorname, string doctorCNIC, string doctorpassword, string hospitalname, object userState) {
            if ((this.registerdOperationCompleted == null)) {
                this.registerdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterdOperationCompleted);
            }
            this.InvokeAsync("registerd", new object[] {
                        doctorname,
                        doctorCNIC,
                        doctorpassword,
                        hospitalname}, this.registerdOperationCompleted, userState);
        }
        
        private void OnregisterdOperationCompleted(object arg) {
            if ((this.registerdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/logina", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void logina([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adminCNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string adminpassword, out bool loginaResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool loginaResultSpecified) {
            object[] results = this.Invoke("logina", new object[] {
                        adminCNIC,
                        adminpassword});
            loginaResult = ((bool)(results[0]));
            loginaResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void loginaAsync(string adminCNIC, string adminpassword) {
            this.loginaAsync(adminCNIC, adminpassword, null);
        }
        
        /// <remarks/>
        public void loginaAsync(string adminCNIC, string adminpassword, object userState) {
            if ((this.loginaOperationCompleted == null)) {
                this.loginaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginaOperationCompleted);
            }
            this.InvokeAsync("logina", new object[] {
                        adminCNIC,
                        adminpassword}, this.loginaOperationCompleted, userState);
        }
        
        private void OnloginaOperationCompleted(object arg) {
            if ((this.loginaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginaCompleted(this, new loginaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/loginp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void loginp([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string patientCNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string patientpassword, out bool loginpResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool loginpResultSpecified) {
            object[] results = this.Invoke("loginp", new object[] {
                        patientCNIC,
                        patientpassword});
            loginpResult = ((bool)(results[0]));
            loginpResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void loginpAsync(string patientCNIC, string patientpassword) {
            this.loginpAsync(patientCNIC, patientpassword, null);
        }
        
        /// <remarks/>
        public void loginpAsync(string patientCNIC, string patientpassword, object userState) {
            if ((this.loginpOperationCompleted == null)) {
                this.loginpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginpOperationCompleted);
            }
            this.InvokeAsync("loginp", new object[] {
                        patientCNIC,
                        patientpassword}, this.loginpOperationCompleted, userState);
        }
        
        private void OnloginpOperationCompleted(object arg) {
            if ((this.loginpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginpCompleted(this, new loginpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/logind", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void logind([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string doctorname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string doctorCNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string doctorpassword, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hospitalname, out bool logindResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool logindResultSpecified) {
            object[] results = this.Invoke("logind", new object[] {
                        doctorname,
                        doctorCNIC,
                        doctorpassword,
                        hospitalname});
            logindResult = ((bool)(results[0]));
            logindResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void logindAsync(string doctorname, string doctorCNIC, string doctorpassword, string hospitalname) {
            this.logindAsync(doctorname, doctorCNIC, doctorpassword, hospitalname, null);
        }
        
        /// <remarks/>
        public void logindAsync(string doctorname, string doctorCNIC, string doctorpassword, string hospitalname, object userState) {
            if ((this.logindOperationCompleted == null)) {
                this.logindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogindOperationCompleted);
            }
            this.InvokeAsync("logind", new object[] {
                        doctorname,
                        doctorCNIC,
                        doctorpassword,
                        hospitalname}, this.logindOperationCompleted, userState);
        }
        
        private void OnlogindOperationCompleted(object arg) {
            if ((this.logindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logindCompleted(this, new logindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WcfService3")]
    public partial class CompositeType {
        
        private bool boolValueField;
        
        private bool boolValueFieldSpecified;
        
        private string stringValueField;
        
        /// <remarks/>
        public bool BoolValue {
            get {
                return this.boolValueField;
            }
            set {
                this.boolValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoolValueSpecified {
            get {
                return this.boolValueFieldSpecified;
            }
            set {
                this.boolValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StringValue {
            get {
                return this.stringValueField;
            }
            set {
                this.stringValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDataUsingDataContractCompletedEventHandler(object sender, GetDataUsingDataContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompositeType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompositeType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void resetCompletedEventHandler(object sender, resetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool resetResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool resetResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void resetaCompletedEventHandler(object sender, resetaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool resetaResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool resetaResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void resetdCompletedEventHandler(object sender, resetdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool resetdResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool resetdResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void registeraCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void registerpCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void registerdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void loginaCompletedEventHandler(object sender, loginaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool loginaResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool loginaResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void loginpCompletedEventHandler(object sender, loginpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool loginpResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool loginpResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void logindCompletedEventHandler(object sender, logindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool logindResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool logindResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591